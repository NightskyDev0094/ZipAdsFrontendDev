!(function (a, b, c) {
  const d = window.matchMedia;
  typeof module !== 'undefined' && module.exports
    ? (module.exports = c(d))
    : typeof define === 'function' && define.amd
    ? define(() => (b[a] = c(d)))
    : (b[a] = c(d));
})('enquire', this, (a) => {
  function b(a, b) {
    let c;
    let d = 0;
    const e = a.length;
    for (d; e > d && ((c = b(a[d], d)), c !== !1); d++);
  }
  function c(a) {
    return Object.prototype.toString.apply(a) === '[object Array]';
  }
  function d(a) {
    return typeof a === 'function';
  }
  function e(a) {
    (this.options = a), !a.deferSetup && this.setup();
  }
  function f(b, c) {
    (this.query = b), (this.isUnconditional = c), (this.handlers = []), (this.mql = a(b));
    const d = this;
    (this.listener = function (a) {
      (d.mql = a), d.assess();
    }),
      this.mql.addListener(this.listener);
  }
  function g() {
    if (!a) throw new Error('matchMedia not present, legacy browsers require a polyfill');
    (this.queries = {}), (this.browserIsIncapable = !a('only all').matches);
  }
  return (
    (e.prototype = {
      setup() {
        this.options.setup && this.options.setup(), (this.initialised = !0);
      },
      on() {
        !this.initialised && this.setup(), this.options.match && this.options.match();
      },
      off() {
        this.options.unmatch && this.options.unmatch();
      },
      destroy() {
        this.options.destroy ? this.options.destroy() : this.off();
      },
      equals(a) {
        return this.options === a || this.options.match === a;
      },
    }),
    (f.prototype = {
      addHandler(a) {
        const b = new e(a);
        this.handlers.push(b), this.matches() && b.on();
      },
      removeHandler(a) {
        const c = this.handlers;
        b(c, (b, d) => (b.equals(a) ? (b.destroy(), !c.splice(d, 1)) : void 0));
      },
      matches() {
        return this.mql.matches || this.isUnconditional;
      },
      clear() {
        b(this.handlers, (a) => {
          a.destroy();
        }),
          this.mql.removeListener(this.listener),
          (this.handlers.length = 0);
      },
      assess() {
        const a = this.matches() ? 'on' : 'off';
        b(this.handlers, (b) => {
          b[a]();
        });
      },
    }),
    (g.prototype = {
      register(a, e, g) {
        const h = this.queries;
        const i = g && this.browserIsIncapable;
        return (
          h[a] || (h[a] = new f(a, i)),
          d(e) && (e = { match: e }),
          c(e) || (e = [e]),
          b(e, (b) => {
            d(b) && (b = { match: b }), h[a].addHandler(b);
          }),
          this
        );
      },
      unregister(a, b) {
        const c = this.queries[a];
        return c && (b ? c.removeHandler(b) : (c.clear(), delete this.queries[a])), this;
      },
    }),
    new g()
  );
});
