!(function (a, b, c, d) {
  function o(b, c) {
    (this.element = b),
      (this.options = a.extend({}, f, c)),
      (this._defaults = f),
      (this._name = e),
      this.init();
  }
  var e = 'stellar';
  var f = {
    scrollProperty: 'scroll',
    positionProperty: 'position',
    horizontalScrolling: !0,
    verticalScrolling: !0,
    horizontalOffset: 0,
    verticalOffset: 0,
    responsive: !1,
    parallaxBackgrounds: !0,
    parallaxElements: !0,
    hideDistantElements: !0,
    hideElement(a) {
      a.hide();
    },
    showElement(a) {
      a.show();
    },
  };
  const g = {
    scroll: {
      getLeft(a) {
        return a.scrollLeft();
      },
      setLeft(a, b) {
        a.scrollLeft(b);
      },
      getTop(a) {
        return a.scrollTop();
      },
      setTop(a, b) {
        a.scrollTop(b);
      },
    },
    position: {
      getLeft(a) {
        return parseInt(a.css('left'), 10) * -1;
      },
      getTop(a) {
        return parseInt(a.css('top'), 10) * -1;
      },
    },
    margin: {
      getLeft(a) {
        return parseInt(a.css('margin-left'), 10) * -1;
      },
      getTop(a) {
        return parseInt(a.css('margin-top'), 10) * -1;
      },
    },
    transform: {
      getLeft(a) {
        const b = getComputedStyle(a[0])[j];
        return b !== 'none' ? parseInt(b.match(/(-?[0-9]+)/g)[4], 10) * -1 : 0;
      },
      getTop(a) {
        const b = getComputedStyle(a[0])[j];
        return b !== 'none' ? parseInt(b.match(/(-?[0-9]+)/g)[5], 10) * -1 : 0;
      },
    },
  };
  const h = {
    position: {
      setLeft(a, b) {
        a.css('left', b);
      },
      setTop(a, b) {
        a.css('top', b);
      },
    },
    transform: {
      setPosition(a, b, c, d, e) {
        a[0].style[j] = `translate3d(${b - c}px, ${d - e}px, 0)`;
      },
    },
  };
  const i = (function () {
    let e;
    const b = /^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/;
    const c = a('script')[0].style;
    let d = '';
    for (e in c)
      if (b.test(e)) {
        d = e.match(b)[0];
        break;
      }
    return (
      'WebkitOpacity' in c && (d = 'Webkit'),
      'KhtmlOpacity' in c && (d = 'Khtml'),
      function (a) {
        return d + (d.length > 0 ? a.charAt(0).toUpperCase() + a.slice(1) : a);
      }
    );
  })();
  var j = i('transform');
  const k = a('<div />', { style: 'background:#fff' }).css('background-position-x') !== d;
  const l = k
    ? function (a, b, c) {
        a.css({ 'background-position-x': b, 'background-position-y': c });
      }
    : function (a, b, c) {
        a.css('background-position', `${b} ${c}`);
      };
  const m = k
    ? function (a) {
        return [a.css('background-position-x'), a.css('background-position-y')];
      }
    : function (a) {
        return a.css('background-position').split(' ');
      };
  const n =
    b.requestAnimationFrame ||
    b.webkitRequestAnimationFrame ||
    b.mozRequestAnimationFrame ||
    b.oRequestAnimationFrame ||
    b.msRequestAnimationFrame ||
    function (a) {
      setTimeout(a, 1e3 / 60);
    };
  (o.prototype = {
    init() {
      (this.options.name = `${e}_${Math.floor(1e9 * Math.random())}`),
        this._defineElements(),
        this._defineGetters(),
        this._defineSetters(),
        this._handleWindowLoadAndResize(),
        this._detectViewport(),
        this.refresh({ firstLoad: !0 }),
        this.options.scrollProperty === 'scroll'
          ? this._handleScrollEvent()
          : this._startAnimationLoop();
    },
    _defineElements() {
      this.element === c.body && (this.element = b),
        (this.$scrollElement = a(this.element)),
        (this.$element = this.element === b ? a('body') : this.$scrollElement),
        (this.$viewportElement =
          this.options.viewportElement !== d
            ? a(this.options.viewportElement)
            : this.$scrollElement[0] === b || this.options.scrollProperty === 'scroll'
            ? this.$scrollElement
            : this.$scrollElement.parent());
    },
    _defineGetters() {
      const a = this;
      const b = g[a.options.scrollProperty];
      (this._getScrollLeft = function () {
        return b.getLeft(a.$scrollElement);
      }),
        (this._getScrollTop = function () {
          return b.getTop(a.$scrollElement);
        });
    },
    _defineSetters() {
      const b = this;
      const c = g[b.options.scrollProperty];
      const d = h[b.options.positionProperty];
      const e = c.setLeft;
      const f = c.setTop;
      (this._setScrollLeft =
        typeof e === 'function'
          ? function (a) {
              e(b.$scrollElement, a);
            }
          : a.noop),
        (this._setScrollTop =
          typeof f === 'function'
            ? function (a) {
                f(b.$scrollElement, a);
              }
            : a.noop),
        (this._setPosition =
          d.setPosition ||
          function (a, c, e, f, g) {
            b.options.horizontalScrolling && d.setLeft(a, c, e),
              b.options.verticalScrolling && d.setTop(a, f, g);
          });
    },
    _handleWindowLoadAndResize() {
      const c = this;
      const d = a(b);
      c.options.responsive &&
        d.bind(`load.${this.name}`, () => {
          c.refresh();
        }),
        d.bind(`resize.${this.name}`, () => {
          c._detectViewport(), c.options.responsive && c.refresh();
        });
    },
    refresh(c) {
      const d = this;
      const e = d._getScrollLeft();
      const f = d._getScrollTop();
      (c && c.firstLoad) || this._reset(),
        this._setScrollLeft(0),
        this._setScrollTop(0),
        this._setOffsets(),
        this._findParticles(),
        this._findBackgrounds(),
        c &&
          c.firstLoad &&
          /WebKit/.test(navigator.userAgent) &&
          a(b).load(() => {
            const a = d._getScrollLeft();
            const b = d._getScrollTop();
            d._setScrollLeft(a + 1),
              d._setScrollTop(b + 1),
              d._setScrollLeft(a),
              d._setScrollTop(b);
          }),
        this._setScrollLeft(e),
        this._setScrollTop(f);
    },
    _detectViewport() {
      const a = this.$viewportElement.offset();
      const b = a !== null && a !== d;
      (this.viewportWidth = this.$viewportElement.width()),
        (this.viewportHeight = this.$viewportElement.height()),
        (this.viewportOffsetTop = b ? a.top : 0),
        (this.viewportOffsetLeft = b ? a.left : 0);
    },
    _findParticles() {
      const b = this;
      this._getScrollLeft(), this._getScrollTop();
      if (this.particles !== d)
        for (let f = this.particles.length - 1; f >= 0; f--)
          this.particles[f].$element.data('stellar-elementIsActive', d);
      (this.particles = []),
        this.options.parallaxElements &&
          this.$element.find('[data-stellar-ratio]').each(function (c) {
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            const e = a(this);
            let o = 0;
            let p = 0;
            let q = 0;
            let r = 0;
            if (e.data('stellar-elementIsActive')) {
              if (e.data('stellar-elementIsActive') !== this) return;
            } else e.data('stellar-elementIsActive', this);
            b.options.showElement(e),
              e.data('stellar-startingLeft')
                ? (e.css('left', e.data('stellar-startingLeft')),
                  e.css('top', e.data('stellar-startingTop')))
                : (e.data('stellar-startingLeft', e.css('left')),
                  e.data('stellar-startingTop', e.css('top'))),
              (h = e.position().left),
              (i = e.position().top),
              (j = e.css('margin-left') === 'auto' ? 0 : parseInt(e.css('margin-left'), 10)),
              (k = e.css('margin-top') === 'auto' ? 0 : parseInt(e.css('margin-top'), 10)),
              (m = e.offset().left - j),
              (n = e.offset().top - k),
              e.parents().each(function () {
                const b = a(this);
                return b.data('stellar-offset-parent') === !0
                  ? ((o = q), (p = r), (l = b), !1)
                  : ((q += b.position().left), void (r += b.position().top));
              }),
              (f =
                e.data('stellar-horizontal-offset') !== d
                  ? e.data('stellar-horizontal-offset')
                  : l !== d && l.data('stellar-horizontal-offset') !== d
                  ? l.data('stellar-horizontal-offset')
                  : b.horizontalOffset),
              (g =
                e.data('stellar-vertical-offset') !== d
                  ? e.data('stellar-vertical-offset')
                  : l !== d && l.data('stellar-vertical-offset') !== d
                  ? l.data('stellar-vertical-offset')
                  : b.verticalOffset),
              b.particles.push({
                $element: e,
                $offsetParent: l,
                isFixed: e.css('position') === 'fixed',
                horizontalOffset: f,
                verticalOffset: g,
                startingPositionLeft: h,
                startingPositionTop: i,
                startingOffsetLeft: m,
                startingOffsetTop: n,
                parentOffsetLeft: o,
                parentOffsetTop: p,
                stellarRatio: e.data('stellar-ratio') !== d ? e.data('stellar-ratio') : 1,
                width: e.outerWidth(!0),
                height: e.outerHeight(!0),
                isHidden: !1,
              });
          });
    },
    _findBackgrounds() {
      let f;
      const b = this;
      const c = this._getScrollLeft();
      const e = this._getScrollTop();
      (this.backgrounds = []),
        this.options.parallaxBackgrounds &&
          ((f = this.$element.find('[data-stellar-background-ratio]')),
          this.$element.data('stellar-background-ratio') && (f = f.add(this.$element)),
          f.each(function () {
            let h;
            let i;
            let n;
            let o;
            let p;
            let q;
            let r;
            const f = a(this);
            const g = m(f);
            let s = 0;
            let t = 0;
            let u = 0;
            let v = 0;
            if (f.data('stellar-backgroundIsActive')) {
              if (f.data('stellar-backgroundIsActive') !== this) return;
            } else f.data('stellar-backgroundIsActive', this);
            f.data('stellar-backgroundStartingLeft')
              ? l(
                  f,
                  f.data('stellar-backgroundStartingLeft'),
                  f.data('stellar-backgroundStartingTop')
                )
              : (f.data('stellar-backgroundStartingLeft', g[0]),
                f.data('stellar-backgroundStartingTop', g[1])),
              (n = f.css('margin-left') === 'auto' ? 0 : parseInt(f.css('margin-left'), 10)),
              (o = f.css('margin-top') === 'auto' ? 0 : parseInt(f.css('margin-top'), 10)),
              (p = f.offset().left - n - c),
              (q = f.offset().top - o - e),
              f.parents().each(function () {
                const b = a(this);
                return b.data('stellar-offset-parent') === !0
                  ? ((s = u), (t = v), (r = b), !1)
                  : ((u += b.position().left), void (v += b.position().top));
              }),
              (h =
                f.data('stellar-horizontal-offset') !== d
                  ? f.data('stellar-horizontal-offset')
                  : r !== d && r.data('stellar-horizontal-offset') !== d
                  ? r.data('stellar-horizontal-offset')
                  : b.horizontalOffset),
              (i =
                f.data('stellar-vertical-offset') !== d
                  ? f.data('stellar-vertical-offset')
                  : r !== d && r.data('stellar-vertical-offset') !== d
                  ? r.data('stellar-vertical-offset')
                  : b.verticalOffset),
              b.backgrounds.push({
                $element: f,
                $offsetParent: r,
                isFixed: f.css('background-attachment') === 'fixed',
                horizontalOffset: h,
                verticalOffset: i,
                startingValueLeft: g[0],
                startingValueTop: g[1],
                startingBackgroundPositionLeft:
                  isNaN(parseInt(g[0], 10)) || g[0].indexOf('%') !== -1 ? 0 : parseInt(g[0], 10),
                startingBackgroundPositionTop:
                  isNaN(parseInt(g[1], 10)) || g[1].indexOf('%') !== -1 ? 0 : parseInt(g[1], 10),
                startingPositionLeft: f.position().left,
                startingPositionTop: f.position().top,
                startingOffsetLeft: p,
                startingOffsetTop: q,
                parentOffsetLeft: s,
                parentOffsetTop: t,
                stellarRatio:
                  f.data('stellar-background-ratio') === d ? 1 : f.data('stellar-background-ratio'),
              });
          }));
    },
    _reset() {
      let a;
      let b;
      let c;
      let d;
      let e;
      for (e = this.particles.length - 1; e >= 0; e--)
        (a = this.particles[e]),
          (b = a.$element.data('stellar-startingLeft')),
          (c = a.$element.data('stellar-startingTop')),
          this._setPosition(a.$element, b, b, c, c),
          this.options.showElement(a.$element),
          a.$element
            .data('stellar-startingLeft', null)
            .data('stellar-elementIsActive', null)
            .data('stellar-backgroundIsActive', null);
      for (e = this.backgrounds.length - 1; e >= 0; e--)
        (d = this.backgrounds[e]),
          d.$element
            .data('stellar-backgroundStartingLeft', null)
            .data('stellar-backgroundStartingTop', null),
          l(d.$element, d.startingValueLeft, d.startingValueTop);
    },
    destroy() {
      this._reset(),
        this.$scrollElement.unbind(`resize.${this.name}`).unbind(`scroll.${this.name}`),
        (this._animationLoop = a.noop),
        a(b).unbind(`load.${this.name}`).unbind(`resize.${this.name}`);
    },
    _setOffsets() {
      const c = this;
      const d = a(b);
      d.unbind(`resize.horizontal-${this.name}`).unbind(`resize.vertical-${this.name}`),
        typeof this.options.horizontalOffset === 'function'
          ? ((this.horizontalOffset = this.options.horizontalOffset()),
            d.bind(`resize.horizontal-${this.name}`, () => {
              c.horizontalOffset = c.options.horizontalOffset();
            }))
          : (this.horizontalOffset = this.options.horizontalOffset),
        typeof this.options.verticalOffset === 'function'
          ? ((this.verticalOffset = this.options.verticalOffset()),
            d.bind(`resize.vertical-${this.name}`, () => {
              c.verticalOffset = c.options.verticalOffset();
            }))
          : (this.verticalOffset = this.options.verticalOffset);
    },
    _repositionElements() {
      let e;
      let f;
      let g;
      let h;
      let i;
      let m;
      let n;
      let o;
      let p;
      let q;
      const a = this._getScrollLeft();
      const b = this._getScrollTop();
      let j = !0;
      let k = !0;
      if (
        this.currentScrollLeft !== a ||
        this.currentScrollTop !== b ||
        this.currentWidth !== this.viewportWidth ||
        this.currentHeight !== this.viewportHeight
      ) {
        for (
          this.currentScrollLeft = a,
            this.currentScrollTop = b,
            this.currentWidth = this.viewportWidth,
            this.currentHeight = this.viewportHeight,
            q = this.particles.length - 1;
          q >= 0;
          q--
        )
          (e = this.particles[q]),
            (f = e.isFixed ? 1 : 0),
            this.options.horizontalScrolling
              ? ((m =
                  (a +
                    e.horizontalOffset +
                    this.viewportOffsetLeft +
                    e.startingPositionLeft -
                    e.startingOffsetLeft +
                    e.parentOffsetLeft) *
                    -(e.stellarRatio + f - 1) +
                  e.startingPositionLeft),
                (o = m - e.startingPositionLeft + e.startingOffsetLeft))
              : ((m = e.startingPositionLeft), (o = e.startingOffsetLeft)),
            this.options.verticalScrolling
              ? ((n =
                  (b +
                    e.verticalOffset +
                    this.viewportOffsetTop +
                    e.startingPositionTop -
                    e.startingOffsetTop +
                    e.parentOffsetTop) *
                    -(e.stellarRatio + f - 1) +
                  e.startingPositionTop),
                (p = n - e.startingPositionTop + e.startingOffsetTop))
              : ((n = e.startingPositionTop), (p = e.startingOffsetTop)),
            this.options.hideDistantElements &&
              ((k =
                !this.options.horizontalScrolling ||
                (o + e.width > (e.isFixed ? 0 : a) &&
                  o < (e.isFixed ? 0 : a) + this.viewportWidth + this.viewportOffsetLeft)),
              (j =
                !this.options.verticalScrolling ||
                (p + e.height > (e.isFixed ? 0 : b) &&
                  p < (e.isFixed ? 0 : b) + this.viewportHeight + this.viewportOffsetTop))),
            k && j
              ? (e.isHidden && (this.options.showElement(e.$element), (e.isHidden = !1)),
                this._setPosition(e.$element, m, e.startingPositionLeft, n, e.startingPositionTop))
              : e.isHidden || (this.options.hideElement(e.$element), (e.isHidden = !0));
        for (q = this.backgrounds.length - 1; q >= 0; q--)
          (g = this.backgrounds[q]),
            (f = g.isFixed ? 0 : 1),
            (h = this.options.horizontalScrolling
              ? `${
                  (a +
                    g.horizontalOffset -
                    this.viewportOffsetLeft -
                    g.startingOffsetLeft +
                    g.parentOffsetLeft -
                    g.startingBackgroundPositionLeft) *
                  (f - g.stellarRatio)
                }px`
              : g.startingValueLeft),
            (i = this.options.verticalScrolling
              ? `${
                  (b +
                    g.verticalOffset -
                    this.viewportOffsetTop -
                    g.startingOffsetTop +
                    g.parentOffsetTop -
                    g.startingBackgroundPositionTop) *
                  (f - g.stellarRatio)
                }px`
              : g.startingValueTop),
            l(g.$element, h, i);
      }
    },
    _handleScrollEvent() {
      const a = this;
      let b = !1;
      const c = function () {
        a._repositionElements(), (b = !1);
      };
      const d = function () {
        b || (n(c), (b = !0));
      };
      this.$scrollElement.bind(`scroll.${this.name}`, d), d();
    },
    _startAnimationLoop() {
      const a = this;
      (this._animationLoop = function () {
        n(a._animationLoop), a._repositionElements();
      }),
        this._animationLoop();
    },
  }),
    (a.fn[e] = function (b) {
      const c = arguments;
      return b === d || typeof b === 'object'
        ? this.each(function () {
            a.data(this, `plugin_${e}`) || a.data(this, `plugin_${e}`, new o(this, b));
          })
        : typeof b === 'string' && b[0] !== '_' && b !== 'init'
        ? this.each(function () {
            const d = a.data(this, `plugin_${e}`);
            d instanceof o &&
              typeof d[b] === 'function' &&
              d[b].apply(d, Array.prototype.slice.call(c, 1)),
              b === 'destroy' && a.data(this, `plugin_${e}`, null);
          })
        : void 0;
    }),
    (a[e] = function (c) {
      const d = a(b);
      return d.stellar.apply(d, Array.prototype.slice.call(arguments, 0));
    }),
    (a[e].scrollProperty = g),
    (a[e].positionProperty = h),
    (b.Stellar = o);
})(jQuery, this, document);
